{"version":3,"sources":["theme/index.js","TodoApp/TodoForm/index.js","TodoApp/TodoList/TodoItem/index.js","TodoApp/TodoList/index.js","TodoApp/Navbar/StatusTabs/index.js","TodoApp/Navbar/ProgressBar/index.js","TodoApp/index.js","serviceWorker.js","index.js"],"names":["space","palette","Input","styled","input","_templateObject","TodoForm","props","handleAddTask","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","onSubmit","e","preventDefault","data-testid","placeholder","onChange","target","propsType","PropTypes","func","TodoItem","title","id","isFinished","handleRemoveTodo","handleToggleTodo","statusText","type","checked","onClick","Container","div","TodoList_templateObject","TodoList","todos","itemList","map","todo","TodoList_TodoItem","key","length","Fragment","defaultProps","StyledButton","button","StatusTabs_templateObject","active","StatusTabs","handleClickMenu","ProgressBar_templateObject","Progress","_templateObject2","width","ProgressBar","percent","ProgressBar_Container","concat","TodoApp","defaultTodos","setTodos","_useState3","_useState4","currentMenu","setCurrentMenu","filterTodos","filter","getFilteredTodo","arguments","undefined","reduce","sum","getProgressPercentage","Navbar_ProgressBar","Navbar_StatusTabs","TodoApp_TodoForm","prevTodos","toConsumableArray","Math","random","TodoApp_TodoList","objectSpread","Boolean","window","location","hostname","match","ReactDOM","render","src_TodoApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b308f02d.chunk.js","sourcesContent":["export const space = {\n  xxxs: '1px',\n  xxs: '2px',\n  xs: '5px',\n  sm: '10px',\n  md: '15px',\n  lg: '20px',\n  xl: '25px',\n  xxl: '30px',\n  xxxl: '50px',\n}\n\nexport const fontSizes = {\n  xxxxs: '0.625rem', // 10 px\n  xxxs: '0.75rem', // 12 px\n  xxs: '0.8125rem', // 13 px\n  xs: '0.875rem', // 14 px\n  sm: '0.9375rem', // 15 px\n  md: '1rem', // 16 px\n  lg: '1.125rem', // 18 px\n  xl: '1.25rem', // 20 px\n  xxl: '1.5rem', // 24 px\n  xxxl: '2.25rem', // 36 px\n}\n\nexport const palette = {\n  grey90: 'rgba(0, 0, 0, 0.9)',\n  grey80: 'rgba(0, 0, 0, 0.8)',\n  grey50: 'rgba(0, 0, 0, 0.5)',\n  grey40: 'rgba(0, 0, 0, 0.4)',\n  grey20: 'rgba(0, 0, 0, 0.2)',\n  grey10: 'rgba(0, 0, 0, 0.1)',\n  grey5: 'rgba(0, 0, 0, 0.05)',\n  primary: '#F3AC67',\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { space, fontSizes, palette } from '../../theme'\n\nconst Input = styled.input`\n  width: 100%;\n  padding: ${space.md};\n  font-size: ${fontSizes.md};\n  outline: none;\n  border: none;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\n  color: ${palette.primary};\n  font-weight: bold;\n\n  ::placeholder {\n    color: ${palette.grey20};\n  }\n`\n\nconst TodoForm = props => {\n  const { handleAddTask } = props\n  const [value, setValue] = useState('')\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    if (value) {\n      handleAddTask(value)\n      setValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit} data-testid=\"todo-form\">\n      <Input\n        data-testid=\"todo-input\"\n        placeholder=\"Add task\"\n        value={value}\n        onChange={onChange}\n      />\n    </form>\n  )\n}\n\nTodoForm.propsType = {\n  handleAddTask: PropTypes.func,\n}\n\nexport default TodoForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst TodoItem = props => {\n  const { title, id, isFinished, handleRemoveTodo, handleToggleTodo } = props\n\n  const statusText = isFinished ? 'Done' : 'In Progress'\n\n  return (\n    <li data-testid=\"todo-item\">\n      <span>{title}</span>\n      <p>{statusText}</p>\n      <input\n        type=\"checkbox\"\n        data-testid=\"checked-btn\"\n        onChange={e => handleToggleTodo(id, e.target.checked)}\n      />\n      <button data-testid=\"remove-btn\" onClick={() => handleRemoveTodo(id)}>\n        Remove\n      </button>\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string,\n  id: PropTypes.string,\n  isFinished: PropTypes.bool,\n  handleRemoveTodo: PropTypes.func,\n  handleToggleTodo: PropTypes.func,\n}\n\nexport default TodoItem\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { space } from '../../theme'\nimport TodoItem from './TodoItem'\n\nconst Container = styled.div`\n  margin-top: ${space.md};\n\n  ul {\n    list-style-type: none;\n    padding-inline-start: 0;\n\n    li {\n      margin-bottom: ${space.md};\n      padding: ${space.md};\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n    }\n  }\n`\n\nconst TodoList = props => {\n  const { todos, handleRemoveTodo, handleToggleTodo } = props\n\n  const itemList = todos.map(todo => (\n    <TodoItem\n      key={todo.id}\n      title={todo.title}\n      id={todo.id}\n      handleRemoveTodo={handleRemoveTodo}\n      handleToggleTodo={handleToggleTodo}\n      isFinished={todo.isFinished}\n    />\n  ))\n\n  return (\n    <Container data-testid=\"todo-list\">\n      {todos.length > 0 ? <ul>{itemList}</ul> : <>Empty</>}\n    </Container>\n  )\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n}\n\nTodoList.defaultProps = {\n  todos: [],\n  handleRemoveTodo: PropTypes.func,\n  handleToggleTodo: PropTypes.func,\n}\n\nexport default TodoList\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst StyledButton = styled.button`\n  text-decoration: ${props => (props.active ? 'underline' : 'none')};\n`\n\nconst StatusTabs = props => {\n  const { active, handleClickMenu } = props\n  return (\n    <div>\n      <StyledButton\n        data-testid=\"all-menu\"\n        active={active === 'all'}\n        onClick={() => handleClickMenu('all')}\n      >\n        All\n      </StyledButton>\n      <StyledButton\n        data-testid=\"inProgress-menu\"\n        active={active === 'inProgress'}\n        onClick={() => handleClickMenu('inProgress')}\n      >\n        In Progress\n      </StyledButton>\n      <StyledButton\n        data-testid=\"done-menu\"\n        active={active === 'done'}\n        onClick={() => handleClickMenu('done')}\n      >\n        Done\n      </StyledButton>\n    </div>\n  )\n}\n\nStatusTabs.propTypes = {\n  active: PropTypes.string,\n  handleClickMenu: PropTypes.func,\n}\n\nStatusTabs.defaultProps = {\n  active: 'all',\n}\n\nexport default StatusTabs\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Container = styled.div`\n  width: 200px;\n  height: 50px;\n  background: black;\n`\n\nconst Progress = styled.div`\n  height: inherit;\n  width: ${props => props.width || 0};\n  background: white;\n`\n\nconst ProgressBar = props => {\n  const { percent } = props\n  return (\n    <Container>\n      <Progress data-testid=\"progress-bar\" width={`${percent}%`} />\n    </Container>\n  )\n}\n\nProgressBar.propTypes = {\n  percent: PropTypes.number,\n}\n\nexport default ProgressBar\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport StatusTabs from './Navbar/StatusTabs'\nimport ProgressBar from './Navbar/ProgressBar'\n\nfunction getFilteredTodo(todos, currentMenu) {\n  if (currentMenu === 'done') {\n    return todos.filter(todo => todo.isFinished === true)\n  }\n  if (currentMenu === 'inProgress') {\n    return todos.filter(todo => todo.isFinished === false)\n  }\n\n  return todos\n}\n\nexport function getProgressPercentage(todos = []) {\n  if (todos.length < 1) return 0\n\n  const finishedAmount = todos.reduce((sum, todo) => todo.isFinished ? (sum = sum += 1) : sum, 0) // prettier-ignore\n\n  return (finishedAmount / todos.length) * 100\n}\n\nfunction TodoApp(props) {\n  const { defaultTodos } = props\n  const [todos, setTodos] = useState(defaultTodos)\n  const [currentMenu, setCurrentMenu] = useState('all')\n\n  const handleAddTask = value => {\n    setTodos(prevTodos =>\n      setTodos([\n        ...prevTodos,\n        { id: `${Math.random(1)}-${value}`, title: value, isFinished: false },\n      ])\n    )\n  }\n\n  const handleRemoveTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  const handleToggleTodo = (id, checked) => {\n    setTodos(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === id ? { ...todo, isFinished: checked } : todo\n      )\n    )\n  }\n\n  const handleClickMenu = value => {\n    setCurrentMenu(value)\n  }\n\n  const filterTodos = getFilteredTodo(todos, currentMenu)\n  const percent = getProgressPercentage(todos)\n\n  return (\n    <div>\n      <ProgressBar percent={percent} />\n      <StatusTabs active={currentMenu} handleClickMenu={handleClickMenu} />\n      <TodoForm handleAddTask={handleAddTask} />\n      <TodoList\n        todos={filterTodos}\n        handleRemoveTodo={handleRemoveTodo}\n        handleToggleTodo={handleToggleTodo}\n      />\n    </div>\n  )\n}\n\nTodoApp.propTypes = {\n  defaultTodos: PropTypes.arrayOf(Object),\n}\n\nTodoApp.defaultProps = {\n  defaultTodos: [],\n}\n\nexport default TodoApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport TodoApp from './TodoApp'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<TodoApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}