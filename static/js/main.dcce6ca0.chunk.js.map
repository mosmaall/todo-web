{"version":3,"sources":["theme/index.js","TodoApp/TodoForm/index.js","TodoApp/TodoList/TodoItem/index.js","TodoApp/TodoList/index.js","TodoApp/index.js","serviceWorker.js","index.js"],"names":["space","palette","Input","styled","input","_templateObject","TodoForm","props","handleAddTask","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","onSubmit","e","preventDefault","data-testid","placeholder","onChange","target","propsType","PropTypes","func","TodoItem","title","id","handleRemoveTodo","onClick","Container","div","TodoList_templateObject","TodoList","todos","itemList","map","todo","TodoList_TodoItem","key","length","Fragment","defaultProps","TodoApp","defaultTodos","setTodos","TodoApp_TodoForm","prevTodos","concat","toConsumableArray","Math","random","TodoApp_TodoList","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_TodoApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAAaA,EAKP,OAoBOC,EAKH,qBALGA,EAQF,wSC5BX,IAAMC,EAAQC,IAAOC,MAAVC,IAEEL,EDWP,OCNKC,EAIEA,GAIPK,EAAW,SAAAC,GAAS,IAChBC,EAAkBD,EAAlBC,cADgBC,EAEEC,mBAAS,IAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjBK,EAFiBH,EAAA,GAEVI,EAFUJ,EAAA,GAgBxB,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SATS,SAAAC,GACfA,EAAEC,iBACEP,IACFN,EAAcM,GACdC,EAAS,MAKeO,cAAY,aACpCN,EAAAC,EAAAC,cAAChB,EAAD,CACEoB,cAAY,aACZC,YAAY,WACZT,MAAOA,EACPU,SAlBW,SAAAJ,GACfL,EAASK,EAAEK,OAAOX,YAuBtBR,EAASoB,UAAY,CACnBlB,cAAemB,IAAUC,MAGZtB,QChCAuB,EAjBE,SAAAtB,GAAS,IAChBuB,EAAgCvB,EAAhCuB,MAAOC,EAAyBxB,EAAzBwB,GAAIC,EAAqBzB,EAArByB,iBACnB,OACEhB,EAAAC,EAAAC,cAAA,MAAII,cAAY,aACdN,EAAAC,EAAAC,cAAA,YAAOY,GACPd,EAAAC,EAAAC,cAAA,UAAQI,cAAY,aAAaW,QAAS,kBAAMD,EAAiBD,KAAjE,oUCFN,IAAMG,EAAY/B,IAAOgC,IAAVC,IACCpC,EAOOA,EACNA,GAMXqC,EAAW,SAAA9B,GAAS,IAChB+B,EAA4B/B,EAA5B+B,MAAON,EAAqBzB,EAArByB,iBAETO,EAAWD,EAAME,IAAI,SAAAC,GAAI,OAC7BzB,EAAAC,EAAAC,cAACwB,EAAD,CACEC,IAAKF,EAAKV,GACVD,MAAOW,EAAKX,MACZC,GAAIU,EAAKV,GACTC,iBAAkBA,MAItB,OACEhB,EAAAC,EAAAC,cAACgB,EAAD,CAAWZ,cAAY,aACpBgB,EAAMM,OAAS,EAAI5B,EAAAC,EAAAC,cAAA,UAAKqB,GAAiBvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4B,SAAA,gBAShDR,EAASS,aAAe,CACtBR,MAAO,GACPN,iBAAkBL,IAAUC,MAGfS,QC5Cf,SAASU,EAAQxC,GAAO,IACdyC,EAAiBzC,EAAjByC,aADcvC,EAEIC,mBAASsC,GAFbrC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEf6B,EAFe3B,EAAA,GAERsC,EAFQtC,EAAA,GAiBtB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CAAU1C,cAfQ,SAAAM,GACpBmC,EAAS,SAAAE,GAAS,OAChBF,EAAQ,GAAAG,OAAAxC,OAAAyC,EAAA,EAAAzC,CACHuC,GADG,CAEN,CAAEpB,GAAE,GAAAqB,OAAKE,KAAKC,OAAO,GAAjB,KAAAH,OAAuBtC,GAASgB,MAAOhB,WAY7CE,EAAAC,EAAAC,cAACsC,EAAD,CAAUlB,MAAOA,EAAON,iBAPH,SAAAD,GACvBkB,EAASX,EAAMmB,OAAO,SAAAhB,GAAI,OAAIA,EAAKV,KAAOA,SAe9CgB,EAAQD,aAAe,CACrBE,aAAc,IAGDD,QC1BKW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dcce6ca0.chunk.js","sourcesContent":["export const space = {\n  xxxs: '1px',\n  xxs: '2px',\n  xs: '5px',\n  sm: '10px',\n  md: '15px',\n  lg: '20px',\n  xl: '25px',\n  xxl: '30px',\n  xxxl: '50px',\n}\n\nexport const fontSizes = {\n  xxxxs: '0.625rem', // 10 px\n  xxxs: '0.75rem', // 12 px\n  xxs: '0.8125rem', // 13 px\n  xs: '0.875rem', // 14 px\n  sm: '0.9375rem', // 15 px\n  md: '1rem', // 16 px\n  lg: '1.125rem', // 18 px\n  xl: '1.25rem', // 20 px\n  xxl: '1.5rem', // 24 px\n  xxxl: '2.25rem', // 36 px\n}\n\nexport const palette = {\n  grey90: 'rgba(0, 0, 0, 0.9)',\n  grey80: 'rgba(0, 0, 0, 0.8)',\n  grey50: 'rgba(0, 0, 0, 0.5)',\n  grey40: 'rgba(0, 0, 0, 0.4)',\n  grey20: 'rgba(0, 0, 0, 0.2)',\n  grey10: 'rgba(0, 0, 0, 0.1)',\n  grey5: 'rgba(0, 0, 0, 0.05)',\n  primary: '#F3AC67',\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { space, fontSizes, palette } from '../../theme'\n\nconst Input = styled.input`\n  width: 100%;\n  padding: ${space.md};\n  font-size: ${fontSizes.md};\n  outline: none;\n  border: none;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\n  color: ${palette.primary};\n  font-weight: bold;\n\n  ::placeholder {\n    color: ${palette.grey20};\n  }\n`\n\nconst TodoForm = props => {\n  const { handleAddTask } = props\n  const [value, setValue] = useState('')\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    if (value) {\n      handleAddTask(value)\n      setValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit} data-testid=\"todo-form\">\n      <Input\n        data-testid=\"todo-input\"\n        placeholder=\"Add task\"\n        value={value}\n        onChange={onChange}\n      />\n    </form>\n  )\n}\n\nTodoForm.propsType = {\n  handleAddTask: PropTypes.func,\n}\n\nexport default TodoForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst TodoItem = props => {\n  const { title, id, handleRemoveTodo } = props\n  return (\n    <li data-testid=\"todo-item\">\n      <span>{title}</span>\n      <button data-testid=\"remove-btn\" onClick={() => handleRemoveTodo(id)}>\n        Remove\n      </button>\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string,\n  id: PropTypes.string,\n}\n\nexport default TodoItem\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { space } from '../../theme'\nimport TodoItem from './TodoItem'\n\nconst Container = styled.div`\n  margin-top: ${space.md};\n\n  ul {\n    list-style-type: none;\n    padding-inline-start: 0;\n\n    li {\n      margin-bottom: ${space.md};\n      padding: ${space.md};\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n    }\n  }\n`\n\nconst TodoList = props => {\n  const { todos, handleRemoveTodo } = props\n\n  const itemList = todos.map(todo => (\n    <TodoItem\n      key={todo.id}\n      title={todo.title}\n      id={todo.id}\n      handleRemoveTodo={handleRemoveTodo}\n    />\n  ))\n\n  return (\n    <Container data-testid=\"todo-list\">\n      {todos.length > 0 ? <ul>{itemList}</ul> : <>Empty</>}\n    </Container>\n  )\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n}\n\nTodoList.defaultProps = {\n  todos: [],\n  handleRemoveTodo: PropTypes.func,\n}\n\nexport default TodoList\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\n\nfunction TodoApp(props) {\n  const { defaultTodos } = props\n  const [todos, setTodos] = useState(defaultTodos)\n\n  const handleAddTask = value => {\n    setTodos(prevTodos =>\n      setTodos([\n        ...prevTodos,\n        { id: `${Math.random(1)}-${value}`, title: value },\n      ])\n    )\n  }\n\n  const handleRemoveTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  return (\n    <div>\n      <TodoForm handleAddTask={handleAddTask} />\n      <TodoList todos={todos} handleRemoveTodo={handleRemoveTodo} />\n    </div>\n  )\n}\n\nTodoApp.propTypes = {\n  defaultTodos: PropTypes.arrayOf(Object),\n}\n\nTodoApp.defaultProps = {\n  defaultTodos: [],\n}\n\nexport default TodoApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport TodoApp from './TodoApp'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<TodoApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}